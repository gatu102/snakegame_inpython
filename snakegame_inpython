import curses
import random
import time
import os

HIGH_SCORE_FILE = "snake_highscore.txt"

def load_high_score():
    if os.path.exists(HIGH_SCORE_FILE):
        with open(HIGH_SCORE_FILE, "r") as f:
            try:
                return int(f.read())
            except:
                return 0
    return 0

def save_high_score(score):
    with open(HIGH_SCORE_FILE, "w") as f:
        f.write(str(score))

def snake_game():
    # Initialize screen
    screen = curses.initscr()
    curses.curs_set(0)
    curses.start_color()
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)  # Snake
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)    # Food
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK) # Score

    height, width = 20, 60
    win = curses.newwin(height, width, 0, 0)
    win.keypad(1)
    win.timeout(150)

    # Initial snake and food
    snake = [[10, 30], [10, 29], [10, 28]]
    food = [random.randint(1, height-2), random.randint(1, width-2)]
    win.addch(food[0], food[1], curses.ACS_PI, curses.color_pair(2))

    key = curses.KEY_RIGHT
    score = 0
    high_score = load_high_score()
    paused = False

    while True:
        win.border()
        win.addstr(0, 2, f" Score: {score} ", curses.color_pair(3))
        win.addstr(0, 20, f" High Score: {high_score} ", curses.color_pair(3))

        next_key = win.getch()
        if next_key == ord('p') or next_key == ord('P'):
            paused = not paused
            if paused:
                win.addstr(height//2, width//2 - 5, "PAUSED")
            else:
                win.addstr(height//2, width//2 - 5, "      ")
            continue
        key = key if next_key == -1 else next_key

        if paused:
            continue

        # Calculate new head
        head = snake[0][:]
        if key == curses.KEY_DOWN:
            head[0] += 1
        elif key == curses.KEY_UP:
            head[0] -= 1
        elif key == curses.KEY_LEFT:
            head[1] -= 1
        elif key == curses.KEY_RIGHT:
            head[1] += 1

        # Game over conditions
        if head in snake or head[0] == 0 or head[0] == height-1 or head[1] == 0 or head[1] == width-1:
            curses.endwin()
            print(f"Game Over! Your score: {score}")
            if score > high_score:
                save_high_score(score)
                print("New High Score!")
            break

        # Move snake
        snake.insert(0, head)

        # Check for food
        if head == food:
            score += 1
            # Increase speed as score increases
            new_timeout = max(50, 150 - (score * 5))
            win.timeout(new_timeout)
            # Generate new food
            food = None
            while food is None:
                nf = [random.randint(1, height-2), random.randint(1, width-2)]
                food = nf if nf not in snake else None
            win.addch(food[0], food[1], curses.ACS_PI, curses.color_pair(2))
        else:
            tail = snake.pop()
            win.addch(tail[0], tail[1], ' ')

        # Draw snake
        win.addch(head[0], head[1], curses.ACS_CKBOARD, curses.color_pair(1))

if __name__ == "__main__":
    snake_game()
