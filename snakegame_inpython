import curses
import random
import os

HIGH_SCORE_FILE = "snake_highscore.txt"

# ----------------- Utility Functions -----------------
def load_high_score():
    try:
        with open(HIGH_SCORE_FILE) as f:
            return int(f.read())
    except:
        return 0

def save_high_score(score):
    with open(HIGH_SCORE_FILE, "w") as f:
        f.write(str(score))

def random_pos(height, width, occupied):
    """Generate random coordinates avoiding occupied spaces."""
    while True:
        pos = [random.randint(1, height - 2), random.randint(1, width - 2)]
        if all(pos not in group for group in occupied):
            return pos

# ----------------- Main Game -----------------
def snake_game():
    screen = curses.initscr()
    curses.curs_set(0)
    curses.start_color()

    colors = {
        "snake": (1, curses.COLOR_GREEN),
        "food": (2, curses.COLOR_GREEN),
        "bonus": (3, curses.COLOR_YELLOW),
        "poison": (4, curses.COLOR_RED),
        "score": (5, curses.COLOR_CYAN),
        "obstacle": (6, curses.COLOR_MAGENTA),
        "ai": (7, curses.COLOR_BLUE),
        "power": (8, curses.COLOR_WHITE),
    }

    for i, (_, col) in enumerate(colors.values(), 1):
        curses.init_pair(i, col, curses.COLOR_BLACK)

    height, width = 20, 60
    win = curses.newwin(height, width, 0, 0)
    win.keypad(True)
    win.timeout(150)

    # Initialize entities
    snake = [[10, 30], [10, 29], [10, 28]]
    ai_snakes = [[[5, 5], [5, 4], [5, 3]], [[15, 50], [15, 51], [15, 52]]]
    score, level = 0, 1
    high_score = load_high_score()
    key, paused = curses.KEY_RIGHT, False
    power_up, power_timer, power_pos = False, 0, None

    # Obstacles
    obstacles = [random_pos(height, width, [snake, *ai_snakes]) for _ in range(15)]

    def create_food():
        pos = random_pos(height, width, [snake, *ai_snakes, obstacles])
        r = random.random()
        if r < 0.7: return pos, 'normal'
        elif r < 0.9: return pos, 'bonus'
        return pos, 'poison'

    def create_powerup():
        return random_pos(height, width, [snake, *ai_snakes, obstacles])

    food, food_type = create_food()
    food_chars = {'normal': curses.ACS_PI, 'bonus': curses.ACS_DIAMOND, 'poison': curses.ACS_CKBOARD}
    food_colors = {'normal': 2, 'bonus': 3, 'poison': 4}

    def move_ai_snake(ai_snake):
        head = ai_snake[0][:]
        head[0] += (food[0] > head[0]) - (food[0] < head[0])
        head[1] += (food[1] > head[1]) - (food[1] < head[1])
        ai_snake.insert(0, head)
        win.addch(*ai_snake.pop(), ' ')
        win.addch(*head, curses.ACS_CKBOARD, curses.color_pair(7))

    while True:
        win.clear()
        win.border()
        win.addstr(0, 2, f"Score:{score}  Level:{level}", curses.color_pair(5))
        win.addstr(0, 30, f"High Score:{high_score}", curses.color_pair(5))
        if power_up: win.addstr(0, 52, "SHIELD", curses.color_pair(8))

        # Draw everything
        for o in obstacles: win.addch(*o, curses.ACS_CKBOARD, curses.color_pair(6))
        for ai in ai_snakes:
            for s in ai: win.addch(*s, curses.ACS_CKBOARD, curses.color_pair(7))
        win.addch(*food, food_chars[food_type], curses.color_pair(food_colors[food_type]))
        if power_pos: win.addch(*power_pos, curses.ACS_BULLET, curses.color_pair(8))

        nxt = win.getch()
        if nxt in [ord('p'), ord('P')]:
            paused = not paused
            win.addstr(height // 2, width // 2 - 4, "PAUSED" if paused else "      ")
            continue
        if paused: continue
        key = key if nxt == -1 else nxt

        # Movement
        head = snake[0][:]
        moves = {curses.KEY_UP: (-1, 0), curses.KEY_DOWN: (1, 0),
                 curses.KEY_LEFT: (0, -1), curses.KEY_RIGHT: (0, 1)}
        if key in moves:
            head[0] += moves[key][0]
            head[1] += moves[key][1]

        # Collisions
        hits_border = head[0] in [0, height - 1] or head[1] in [0, width - 1]
        hits_any = head in snake or head in obstacles or any(head in a for a in ai_snakes)
        if (hits_border or hits_any) and not power_up:
            curses.endwin()
            print(f"\nGame Over!  Score: {score}  Level: {level}")
            if score > high_score:
                save_high_score(score)
                print("ðŸŽ‰ New High Score!")
            break

        snake.insert(0, head)

        # Food logic
        if head == food:
            score += {'normal': 1, 'bonus': 3, 'poison': -1}.get(food_type, 0)
            score = max(score, 0)
            level = score // 5 + 1
            win.timeout(max(50, 150 - (level - 1) * 10))
            food, food_type = create_food()
            if random.random() < 0.2:
                power_pos = create_powerup()
        else:
            win.addch(*snake.pop(), ' ')

        # Power-up
        if power_pos and head == power_pos:
            power_up, power_timer, power_pos = True, 30, None
        if power_up:
            power_timer -= 1
            if power_timer <= 0:
                power_up = False

        # AI
        for ai in ai_snakes: move_ai_snake(ai)
        win.addch(*head, curses.ACS_CKBOARD, curses.color_pair(1))

if __name__ == "__main__":
    snake_game()
