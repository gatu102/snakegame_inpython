import curses
import random
import os
from datetime import datetime

# ---------------- Config ----------------
HIGH_SCORE_FILE = "snake_highscore.txt"
HEIGHT, WIDTH = 20, 60
INITIAL_SPEED = 150
OBSTACLE_COUNT = 15
POWERUP_CHANCE = 0.2
POWERUP_DURATION = 30
# -----------------------------------------

# Load & save high score
def load_high_score():
    if os.path.exists(HIGH_SCORE_FILE):
        try:
            with open(HIGH_SCORE_FILE, "r") as f:
                return int(f.read())
        except ValueError:
            return 0
    return 0

def save_high_score(score):
    with open(HIGH_SCORE_FILE, "w") as f:
        f.write(str(score))

# Snake Game
def snake_game():
    screen = curses.initscr()
    curses.curs_set(0)
    curses.start_color()

    # Colors
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)   # Player Snake
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)   # Normal Food
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)  # Bonus Food
    curses.init_pair(4, curses.COLOR_RED, curses.COLOR_BLACK)     # Poison
    curses.init_pair(5, curses.COLOR_CYAN, curses.COLOR_BLACK)    # HUD/Score
    curses.init_pair(6, curses.COLOR_MAGENTA, curses.COLOR_BLACK) # Obstacles
    curses.init_pair(7, curses.COLOR_BLUE, curses.COLOR_BLACK)    # AI Snakes
    curses.init_pair(8, curses.COLOR_WHITE, curses.COLOR_BLACK)   # Power-ups
    curses.init_pair(9, curses.COLOR_GREEN, curses.COLOR_BLUE)    # Shielded Snake

    win = curses.newwin(HEIGHT, WIDTH, 0, 0)
    win.keypad(1)
    win.timeout(INITIAL_SPEED)

    # Player & AI snakes
    snake = [[10, 30], [10, 29], [10, 28]]
    ai_snakes = [
        [[5, 5], [5, 4], [5, 3]],
        [[15, 50], [15, 51], [15, 52]],
    ]
    score, high_score = 0, load_high_score()
    level, key, paused = 1, curses.KEY_RIGHT, False
    power_up, power_timer, power_up_pos = False, 0, None

    # Obstacles
    obstacles = []
    while len(obstacles) < OBSTACLE_COUNT:
        o = [random.randint(1, HEIGHT - 2), random.randint(1, WIDTH - 2)]
        if o not in snake and all(o not in a for a in ai_snakes) and o not in obstacles:
            obstacles.append(o)

    # Food types
    food_chars = {'normal': curses.ACS_PI, 'bonus': curses.ACS_DIAMOND, 'poison': curses.ACS_CKBOARD}
    food_colors = {'normal': 2, 'bonus': 3, 'poison': 4}

    def create_food():
        while True:
            nf = [random.randint(1, HEIGHT - 2), random.randint(1, WIDTH - 2)]
            if nf not in snake and all(nf not in a for a in ai_snakes) and nf not in obstacles:
                r = random.random()
                if r < 0.7: return nf, 'normal'
                elif r < 0.9: return nf, 'bonus'
                else: return nf, 'poison'

    def create_powerup():
        while True:
            pu = [random.randint(1, HEIGHT - 2), random.randint(1, WIDTH - 2)]
            if pu not in snake and all(pu not in a for a in ai_snakes) and pu not in obstacles:
                return pu

    def move_ai_snake(ai_snake):
        head = ai_snake[0][:]
        # Random wiggle chance
        if random.random() < 0.2:
            head[random.choice([0, 1])] += random.choice([-1, 1])
        else:
            if head[0] < food[0]: head[0] += 1
            elif head[0] > food[0]: head[0] -= 1
            if head[1] < food[1]: head[1] += 1
            elif head[1] > food[1]: head[1] -= 1
        ai_snake.insert(0, head)
        tail = ai_snake.pop()
        win.addch(tail[0], tail[1], ' ')
        win.addch(head[0], head[1], curses.ACS_CKBOARD, curses.color_pair(7))

    def draw_objects():
        # HUD
        win.border()
        win.addstr(0, 2, f"Score:{score} Level:{level}", curses.color_pair(5))
        win.addstr(0, 30, f"High Score:{high_score}", curses.color_pair(5))
        if power_up: win.addstr(0, WIDTH - 15, "SHIELD ON", curses.color_pair(8))

        # Obstacles
        for o in obstacles:
            win.addch(o[0], o[1], curses.ACS_CKBOARD, curses.color_pair(6))

        # AI snakes
        for a_snake in ai_snakes:
            for segment in a_snake:
                win.addch(segment[0], segment[1], curses.ACS_CKBOARD, curses.color_pair(7))

        # Food
        win.addch(food[0], food[1], food_chars[food_type], curses.color_pair(food_colors[food_type]))

        # Power-up
        if power_up_pos:
            win.addch(power_up_pos[0], power_up_pos[1], curses.ACS_BULLET, curses.color_pair(8))

    # Start with food
    food, food_type = create_food()

    try:
        while True:
            win.clear()
            draw_objects()

            # Input
            next_key = win.getch()
            if next_key in [ord('p'), ord('P')]:
                paused = not paused
                if paused:
                    win.addstr(HEIGHT // 2, WIDTH // 2 - 5, "GAME PAUSED", curses.color_pair(5))
                continue
            key = key if next_key == -1 else next_key
            if paused: continue

            # Move player
            head = snake[0][:]
            if key == curses.KEY_DOWN: head[0] += 1
            elif key == curses.KEY_UP: head[0] -= 1
            elif key == curses.KEY_LEFT: head[1] -= 1
            elif key == curses.KEY_RIGHT: head[1] += 1

            # Collision
            if (
                head in snake or head in obstacles or
                any(head in a for a in ai_snakes) or
                head[0] in [0, HEIGHT - 1] or head[1] in [0, WIDTH - 1]
            ):
                if not power_up:
                    curses.endwin()
                    print(f"Game Over! Score:{score} Level:{level}")
                    if score > high_score:
                        save_high_score(score)
                        print("New High Score!")
                    break

            snake.insert(0, head)

            # Food collision
            if head == food:
                if food_type == 'normal': score += 1
                elif food_type == 'bonus': score += 3
                elif food_type == 'poison': score = max(0, score - 1)
                level = score // 5 + 1
                win.timeout(max(50, INITIAL_SPEED - (level - 1) * 10))
                food, food_type = create_food()
                if random.random() < POWERUP_CHANCE:
                    power_up_pos = create_powerup()
            else:
                tail = snake.pop()
                win.addch(tail[0], tail[1], ' ')

            # Power-up
            if power_up_pos and head == power_up_pos:
                power_up = True
                power_timer = POWERUP_DURATION
                power_up_pos = None

            if power_up:
                power_timer -= 1
                if power_timer <= 0:
                    power_up = False

            # AI snakes move
            for a_snake in ai_snakes:
                move_ai_snake(a_snake)

            # Draw player snake
            color = 9 if power_up else 1
            for segment in snake:
                win.addch(segment[0], segment[1], curses.ACS_CKBOARD, curses.color_pair(color))

    finally:
        curses.endwin()

if __name__ == "__main__":
    snake_game()
