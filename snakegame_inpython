import curses
import random
import os

HIGH_SCORE_FILE = "snake_highscore.txt"

# -------------------- Utility Functions -------------------- #
def load_high_score():
    """Load high score from file."""
    if os.path.exists(HIGH_SCORE_FILE):
        try:
            with open(HIGH_SCORE_FILE, "r") as f:
                return int(f.read())
        except ValueError:
            return 0
    return 0

def save_high_score(score):
    """Save high score to file."""
    with open(HIGH_SCORE_FILE, "w") as f:
        f.write(str(score))

# -------------------- Main Game Function -------------------- #
def snake_game():
    # Initialize curses window
    screen = curses.initscr()
    curses.curs_set(0)
    curses.start_color()
    curses.noecho()
    curses.cbreak()
    screen.keypad(True)

    # Color pairs
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)    # Player snake
    curses.init_pair(2, curses.COLOR_YELLOW, curses.COLOR_BLACK)   # Bonus food
    curses.init_pair(3, curses.COLOR_RED, curses.COLOR_BLACK)      # Poison
    curses.init_pair(4, curses.COLOR_CYAN, curses.COLOR_BLACK)     # Score text
    curses.init_pair(5, curses.COLOR_MAGENTA, curses.COLOR_BLACK)  # Obstacles
    curses.init_pair(6, curses.COLOR_BLUE, curses.COLOR_BLACK)     # AI snake

    height, width = 22, 60
    win = curses.newwin(height, width, 0, 0)
    win.keypad(True)
    win.timeout(150)

    # -------------------- Initial Setup -------------------- #
    snake = [[10, 30], [10, 29], [10, 28]]
    ai_snake = [[5, 5], [5, 4], [5, 3]]
    score, level = 0, 1
    high_score = load_high_score()
    key = curses.KEY_RIGHT
    paused = False

    # Obstacles generation
    obstacles = []
    for _ in range(15):
        while True:
            o = [random.randint(1, height - 2), random.randint(1, width - 2)]
            if o not in snake + ai_snake + obstacles:
                obstacles.append(o)
                break

    # -------------------- Food Management -------------------- #
    def create_food():
        """Generate a new food with random type."""
        while True:
            pos = [random.randint(1, height - 2), random.randint(1, width - 2)]
            if pos not in snake + ai_snake + obstacles:
                r = random.random()
                if r < 0.7:
                    return pos, 'normal'
                elif r < 0.9:
                    return pos, 'bonus'
                else:
                    return pos, 'poison'

    food, food_type = create_food()
    food_symbols = {'normal': curses.ACS_PI, 'bonus': curses.ACS_DIAMOND, 'poison': curses.ACS_CKBOARD}
    food_colors = {'normal': 1, 'bonus': 2, 'poison': 3}

    # -------------------- AI Movement -------------------- #
    def move_ai_snake():
        """Simple AI that moves toward the food position."""
        head = ai_snake[0][:]
        if head[0] < food[0]: head[0] += 1
        elif head[0] > food[0]: head[0] -= 1
        if head[1] < food[1]: head[1] += 1
        elif head[1] > food[1]: head[1] -= 1

        if head in obstacles or head in snake:
            return  # avoid collision if possible

        ai_snake.insert(0, head)
        tail = ai_snake.pop()
        win.addch(tail[0], tail[1], ' ')
        win.addch(head[0], head[1], curses.ACS_CKBOARD, curses.color_pair(6))

    # -------------------- Game Loop -------------------- #
    while True:
        win.clear()
        win.border()

        # Header Display
        win.addstr(0, 2, f" Score: {score}  Level: {level} ", curses.color_pair(4))
        win.addstr(0, 35, f" High Score: {high_score} ", curses.color_pair(4))

        # Draw Obstacles
        for o in obstacles:
            win.addch(o[0], o[1], curses.ACS_BLOCK, curses.color_pair(5))

        # Draw AI snake
        for segment in ai_snake:
            win.addch(segment[0], segment[1], curses.ACS_CKBOARD, curses.color_pair(6))

        # Draw Food
        win.addch(food[0], food[1], food_symbols[food_type], curses.color_pair(food_colors[food_type]))

        # Handle Key Input
        next_key = win.getch()
        if next_key in [ord('p'), ord('P')]:
            paused = not paused
            if paused:
                win.addstr(height // 2, width // 2 - 4, "PAUSED")
            continue
        elif next_key in [27, ord('q'), ord('Q')]:  # ESC or Q to quit
            break

        if paused:
            continue

        if next_key != -1:
            key = next_key

        # Snake Movement
        head = snake[0][:]
        if key == curses.KEY_DOWN: head[0] += 1
        elif key == curses.KEY_UP: head[0] -= 1
        elif key == curses.KEY_LEFT: head[1] -= 1
        elif key == curses.KEY_RIGHT: head[1] += 1

        # Check Collisions
        if (head in snake or head in ai_snake or head in obstacles or
            head[0] == 0 or head[0] == height - 1 or head[1] == 0 or head[1] == width - 1):
            curses.endwin()
            print(f"\nüíÄ Game Over! Final Score: {score}  |  Level: {level}")
            if score > high_score:
                save_high_score(score)
                print("üèÜ New High Score Achieved!")
            return

        snake.insert(0, head)

        # Food Collision
        if head == food:
            if food_type == 'normal':
                score += 1
            elif food_type == 'bonus':
                score += 3
            elif food_type == 'poison':
                score = max(0, score - 1)

            level = score // 5 + 1
            win.timeout(max(50, 150 - (level - 1) * 10))  # speed up
            food, food_type = create_food()
        else:
            tail = snake.pop()
            win.addch(tail[0], tail[1], ' ')

        move_ai_snake()

        # Draw Player Snake
        for seg in snake:
            win.addch(seg[0], seg[1], curses.ACS_CKBOARD, curses.color_pair(1))

# -------------------- Entry Point -------------------- #
if __name__ == "__main__":
    try:
        snake_game()
    except Exception as e:
        curses.endwin()
        print("Error:", e)
